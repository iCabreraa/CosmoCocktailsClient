"use client";

import { createClient } from "@/lib/supabase/client";
import { SecurityEventInsert } from "@/types/supabase";

export interface AdminAccessLog {
  event_type:
    | "admin_access_attempt"
    | "admin_access_granted"
    | "admin_access_denied";
  user_id: string | null;
  success: boolean;
  reason?: string;
  verification_details: {
    isAuthenticated: boolean;
    hasValidRole: boolean;
    userRole: string | null;
    rolesSynchronized: boolean;
    isUserActive: boolean;
    userStatus: string | null;
    hasValidSession: boolean;
    sessionExpiresAt: Date | null;
  };
  timestamp: Date;
  ip_address?: string;
  user_agent?: string;
}

class AdminAccessLogger {
  private supabase = createClient();

  async logAccessAttempt(
    logData: Omit<AdminAccessLog, "timestamp" | "ip_address" | "user_agent">
  ): Promise<void> {
    try {
      const fullLogData: AdminAccessLog = {
        ...logData,
        timestamp: new Date(),
        ip_address: this.getClientIP(),
        user_agent:
          typeof window !== "undefined"
            ? window.navigator.userAgent
            : undefined,
      };

      // Log en la tabla security_events
      const securityEvent: SecurityEventInsert = {
        event_type: logData.event_type,
        user_id: logData.user_id,
        success: logData.success,
        reason: logData.reason,
        details: {
          verification_details: logData.verification_details,
          timestamp: fullLogData.timestamp.toISOString(),
          ip_address: fullLogData.ip_address,
          user_agent: fullLogData.user_agent,
        },
        ip_address: fullLogData.ip_address,
        user_agent: fullLogData.user_agent,
        created_at: fullLogData.timestamp.toISOString(),
      };

      await this.supabase.from("security_events").insert(securityEvent);

      // También log en consola para desarrollo
      if (process.env.NODE_ENV === "development") {
        console.log(`[AdminAccess] ${logData.event_type}:`, {
          success: logData.success,
          reason: logData.reason,
          user_id: logData.user_id,
        });
      }
    } catch (error) {
      console.error("Error logging admin access attempt:", error);
      // No fallar la aplicación por errores de logging
    }
  }

  private getClientIP(): string | undefined {
    // En el cliente, no podemos obtener la IP real
    // Esto se manejará mejor en el servidor
    return undefined;
  }
}

export const adminAccessLogger = new AdminAccessLogger();
