import { NextResponse } from "next/server";
import { createClient } from "@/lib/supabase/server";
import { UserInsert, UserRole, SecurityEventInsert } from "@/types/supabase";

export async function POST(request: Request) {
  try {
    const {
      email,
      password,
      full_name,
      phone,
      avatar_url,
      role = "customer", // Cambiar de "client" a "customer" para consistencia
      ...rest
    } = await request.json();

    if (!email || !password || !full_name) {
      return NextResponse.json(
        { error: "Email, password and full_name are required" },
        { status: 400 }
      );
    }

    const supabase = createClient();

    // 1. Crear usuario en Supabase Auth con rol en metadata
    const { data: authData, error: authError } = await supabase.auth.signUp({
      email,
      password,
      options: {
        data: {
          role,
          full_name,
          phone,
          avatar_url,
        },
      },
    });

    if (authError) {
      console.error("Auth signup error:", authError);
      return NextResponse.json({ error: authError.message }, { status: 400 });
    }

    if (!authData.user) {
      return NextResponse.json(
        { error: "Failed to create user" },
        { status: 400 }
      );
    }

    // 2. El trigger se encargará de crear el perfil en users automáticamente
    // Pero por seguridad, también lo hacemos manualmente aquí

    // Esperar un momento para que el trigger se ejecute
    await new Promise(resolve => setTimeout(resolve, 100));

    // Verificar que el perfil se creó (o crearlo si el trigger falló)
    const userData: UserInsert = {
      id: authData.user.id,
      email,
      full_name,
      phone,
      avatar_url,
      role: role as UserRole,
      status: "active",
      preferences: {},
      metadata: rest,
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString(),
    };

    const { data: profileData, error: profileError } = await supabase
      .from("users")
      .insert(userData)
      .select("*")
      .single();

    // Si el perfil ya existe (creado por el trigger), obtenerlo
    if (profileError && profileError.code === "23505") {
      // Unique violation
      const { data: existingProfile } = await supabase
        .from("users")
        .select("*")
        .eq("id", authData.user.id)
        .single();

      if (existingProfile) {
        return NextResponse.json({
          user: existingProfile,
          message:
            "User created successfully with automatic role synchronization",
        });
      }
    }

    if (profileError && profileError.code !== "23505") {
      console.error("Profile creation error:", profileError);
      // No fallar aquí, el usuario ya existe en auth
      return NextResponse.json({
        user: { id: authData.user.id, email, full_name, phone, role },
        message: "User created in auth, profile sync pending",
      });
    }

    // 3. Log del evento para auditoría
    const securityEvent: SecurityEventInsert = {
      event_type: "user_signup",
      user_id: authData.user.id,
      success: true,
      reason: "User registration completed",
      details: {
        email,
        role,
        source: "api_signup",
      },
      created_at: new Date().toISOString(),
    };

    await supabase.from("security_events").insert(securityEvent);

    const { password: _pw, ...safeUser } = profileData ?? {};
    return NextResponse.json({
      user: safeUser,
      message: "User created successfully with role synchronization",
    });
  } catch (err) {
    console.error("Signup error:", err);
    return NextResponse.json({ error: "Server error" }, { status: 500 });
  }
}
